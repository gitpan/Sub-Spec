package Sub::Spec::FAQ; # make PodWeaver happy

our $VERSION = '1.0.3'; # VERSION

1;
# ABSTRACT: Frequently asked questions about Sub::Spec


__END__
=pod

=head1 NAME

Sub::Spec::FAQ - Frequently asked questions about Sub::Spec

=head1 VERSION

version 1.0.3

=head1 QUESTIONS

=head2 General

=head3 Do I need to 'use Sub::Spec'?

No. L<Sub::Spec> is just a specification. And your sub spec is just data
structure (with some coderefs, for some clauses). There are modules that do
stuffs using information from the sub spec, and you 'use' those.

=head3 Where should I put the specs?

L<Sub::Spec::URI::pm> expects them to be in C<%SPEC> package variables. Most
other subroutine uses Sub::Spec::URI::pm to locate local specs.

=head3 I have created a spec, now what happens? What can it do for my sub?

Nothing. Just creating the spec won't magically change your sub, the spec is
just a piece of data. You need one or more modules that do stuffs to your sub
using the spec. L<Sub::Spec::Wrapper> and L<Sub::Spec::Exporter> should be the
first one to see; they implement many of the basic clauses like 'args' for
argument validation, 'timeout', etc. For the rest, browse Sub::Spec::* on CPAN
to see a growing list of modules. Here's a partial list:

=over 4

=item * Run subroutine from command line (see L<Sub::Spec::CmdLine>)

=item * Create an API service (L<Sub::Spec::HTTP::Server>)

=item * Use remote modules and call remote functions transparently (L<Sub::Spec::Use>, L<Sub::Spec::URI::http>)

=item * Generate documentation from spec (Sub::Spec::To::*)

=back

=head2 Extending

=head3 Should I add a new feature clause, or a new spec clause?

For a fast rule, if your clause only describes what the sub does and does not
include any wrapper code, then it probably goes into C<features>. Otherwise, it
should go into a new spec clause.

For example, C<reverse> is a feature clause, because it just states that if we
pass C<-reverse> => 1 argument to a sub, it will do a reverse operation. It
doesn't include any wrapper code. On the other hand, 'timeout' is a spec clause
because it involves the wrapping code doing an eval() and alarm() checking.

=head1 AUTHOR

Steven Haryanto <stevenharyanto@gmail.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2011 by Steven Haryanto.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut

